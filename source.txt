**********// 01_Knapsack //**********

#include<bits/stdc++.h>
using namespace std;
int dp[10][10];

int knapsack_01(int n, int w, int profit[], int wt[])
{
	if(n == 0 || w == 0) return 0; //base case
	if(dp[n][w] != -1) return dp[n][w];
 
	if(wt[n-1] > w) 
		return dp[n][w] = knapsack_01(n-1, w, profit, wt);
	else
		return dp[n][w] = max(knapsack_01(n-1, w, profit, wt),
			profit[n-1]+knapsack_01(n-1, w-wt[n-1], profit, wt));
}
int main()
{
	int profit[] = {1, 7, 11};
	int wt[] = {1,2,3};
	int w = 5;
	memset(dp, -1, sizeof(dp));
	int n = sizeof(profit)/sizeof(profit[0]);
	cout << knapsack_01(n, w, profit, wt) << endl;
	return 0;
}



**********// Lcs Using Recursion //**********

#include<bits/stdc++.h>
using namespace std;

int lcs(string &S1, string &S2, int m, int n){
    if (m == 0 || n == 0)
        return 0; //base case

    if (S1[m - 1] == S2[n - 1])
        return 1 + lcs(S1, S2, m - 1, n - 1);

    else {
        return max(lcs(S1, S2, m, n - 1), 
        	lcs(S1, S2, m - 1, n));
    }
}

int main() {
    string S1 = "CBDA";
    string S2 = "ACADB";
    int m = S1.size();
    int n = S2.size();

    cout << "Length of LCS: " << lcs(S1, S2, m, n);

    return 0;
}



**********// Binary Search //**********



#include<bits/stdc++.h>
using namespace std;

// Function to perform binary search on a sorted array
int binarySearch(int arr[], int target, int n)
{
	int low = 0, high = n;  // Initialize low and high pointers
	while(low <= high)
	{
		int mid = (low + high) / 2;  // Calculate mid index
		if(arr[mid] == target)  // If the middle element is the target
			return mid;  // Return the index of the target
		else if (arr[mid] > target)  // If middle element is greater than the target
			high = mid - 1;  // Adjust the high pointer to search in the left half
		else if (arr[mid] < target)  // If middle element is less than the target
			low = mid + 1;  // Adjust the low pointer to search in the right half
	}
	return -1;  // Return -1 if the target is not found
}

int main()
{
    int n, target;
    
    // Input the number of elements in the array
    scanf("%d", &n);
    int arr[n];
    
    // Input elements of the array
    for(int i = 0; i < n; i++)
        cin >> arr[i];
    
    // Input the target element to search for
    cin >> target;

    // Sort the array in ascending order (required for binary search)
    sort(arr, arr + n);
    
    // Display the sorted array
    printf("Sorted array: \n");
    for(int i = 0; i < n; i++)
        printf("%d ", arr[i]);
    cout << endl;

    // Call binary search function to find the target element in the array
    int idx = binarySearch(arr, target, n);

    // Check if target is found and display the result
    if(idx >= 0)
        printf("%d is at index %d\n", target, idx);
    else
        printf("Not Found!\n");
 
    return 0;
}

/* Sample I/O
5
4 5 1 2 7
5
*/



**********// Coin Change DP //**********

#include<bits/stdc++.h>
using namespace std;

#define mx 1000  // Define the maximum size for memoization array
int dp[mx][mx];

int counts(int coins[], int n, int target_amount)
{
	// Base case: If target amount is 0, there's one way to make it (by choosing no coins)
	if (target_amount == 0) 
		dp[n][target_amount] = 1;

	// Base case: If target amount is negative or no coins are left, no solution exists
	if (target_amount < 0 || n == 0) 
		dp[n][target_amount] = 0;

	// Check if the result has already been computed (memoization)
	if(dp[n][target_amount] == -1)
		// Recursive relation: either include the current coin or exclude it
		dp[n][target_amount] = counts(coins, n, target_amount - coins[n-1]) + 
		                       counts(coins, n - 1, target_amount);

	return dp[n][target_amount];
}

int main()
{
	int coins[] = {1, 2, 3};  // Array representing the coin denominations
	int n = 3;  // Number of coin types
	int target_amount = 5;  // Target amount to achieve with coins

	// Initialize dp array with -1 to indicate uncomputed values
	memset(dp, -1, sizeof(dp));

	// Call the counts function to get the number of ways to make the target amount
	cout << counts(coins, n, target_amount) << endl;

	return 0;
}




**********// nCr With DP //**********


#include<bits/stdc++.h>
using namespace std;

#define mx 100  // Define the maximum value for n and r
#define p 1000000007  // Define a large prime number for modulo operation to avoid overflow

int dp[mx][mx];

// Function to calculate nCr using dynamic programming with memoization
int nCr(int n, int r)
{
	// Base cases for nCr
	if(n == r) dp[n][r] = 1;  // If n == r, nCr is 1 (only one way to choose all items)
	if(r == 1) dp[n][r] = n;  // If r == 1, nCr is n (n ways to choose one item)
	if(r == 0) dp[n][r] = 1;  // If r == 0, nCr is 1 (only one way to choose none)

	// If the value is not yet computed
	if(dp[n][r] == -1) 
		dp[n][r] = (nCr(n - 1, r - 1) % p + nCr(n - 1, r) % p) % p;
	// Recurrence relation: nCr = (n-1)Cr-1 + (n-1)Cr, with modulo operation for large results

	return dp[n][r];  // Return the computed value of nCr
}

int main()
{
	// Initialize the dp array with -1 indicating uncomputed values
	memset(dp, -1, sizeof(dp));
	
	int n, r; 
	cin >> n >> r;
	
	// Check for valid input where n should be greater than or equal to r
	if(n > r)
		cout << nCr(n, r);  // Call nCr function and print result if input is valid
	else
		cout << "Invalid Input\n";
	
	return 0;
}


































